type: webhook

messages:
  - text: <@&795155105854259200>
    embeds:
    - title: Decorators
      fields:
      - name: What are Decorators
        value: |
          Decorators are *callables* that can be used to modify a `function` or `class`
          to add functionality or apply changes
      - name: Usage example
        value: |
          To use a decorator simply use this syntax\:
          ```py
          @decorator
          def function_name(args):
            pass
            # Do stuff
          ```
      - name: Creating a decorator
        value: |
          To create a decorator simply create a function or class that can be *called*
          Example:
          ```py
          def decorator(func): # Accept a function as the only argument
             def new_func(*args, **kwargs):
               original = func(*args, **kwargs)
               return str(original)
             return new_func
          ```
          This example decorator makes the return type always a string
      - name: What next?
        value: |
           Part - 2 of this brainfeed will be coming soon!
           We'll be covering class based decorators and using decorators on classes

username: BrainFeed
avatar_url: https://exploringyourmind.com/wp-content/uploads/2019/01/brain-on-fire.jpg
